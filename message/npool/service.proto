syntax = "proto3";

package sphinx.v1;

option go_package = "github.com/NpoolPlatform/sphinx-service/message/npool";

import "google/api/annotations.proto";
import "google/protobuf/Empty.proto";

// 交易服务
service Trading {
	// 创建账户
	rpc RegisterAccount (RegisterAccountRequest) returns (AccountAddress) {
		option (google.api.http) = {
			post: "/v1/account/register"
			body: "*"
		};}
	// 余额查询
	rpc GetBalance (GetBalanceRequest) returns (AccountBalance) {
		option (google.api.http) = {
			get: "/v1/account/balance"
		};}
	// 转账 / 提现
	rpc ApplyTransaction (ApplyTransactionRequest) returns (SuccessInfo) {
		option (google.api.http) = {
			post: "/v1/account/transaction"
			body: "*"
		};}
	// TODO: 账户交易查询
	rpc GetTxJSON (GetTxJSONRequest) returns (AccountTxJSON) {} // reserved function
	// 交易状态查询
	rpc GetInsiteTxStatus (GetInsiteTxStatusRequest) returns (GetInsiteTxStatusResponse) {
		option (google.api.http) = {
			get: "/v1/account/transaction"
		};}
}

// RegisterAccount 参数
message RegisterAccountRequest {
	int32 coin_id = 1;
	string uuid = 2; // user_id或与其绑定的唯一标识符
}
// RegisterAccount 返回
message AccountAddress {
	int32 coin_id = 1;
	string address = 2; // 创建的钱包地址
	string uuid = 3; // uuid将用于加密私钥，提高整体安全性
}

// GetBalance 参数
message GetBalanceRequest {
	int32 coin_id = 1;
	string address = 2; // 查询的钱包地址
	int64 timestamp_utc = 3; // 长整型时间戳
}
// GetBalance 返回
message AccountBalance {
	int32 coin_id = 1;
	string address = 2; // 查询的钱包地址
	int64 timestamp_utc = 3; // 长整型时间戳
	double amount_float64 = 4; // 不入库的参考金额
	uint64 amount_uint64 = 5; // 内部交互标准金额格式
}

// GetTxJSONRequest 参数
message GetTxJSONRequest {
	// 继承钱包节点基础功能，预留
	int32 coin_id = 1;
	string address = 2; // 要查询的钱包地址
	int64 timefrom_utc = 3; // 开始时间
	int64 timetill_utc = 4; // 结束时间
	int32 limit_n = 5; // 服务端限制返回条数
}
// GetTxJSONRequest 返回
message AccountTxJSON {
	string json = 1;
}

// GetInsiteTxStatus 参数
message GetInsiteTxStatusRequest {
	string transaction_id_insite = 1; // 站内交易ID
}

// GetInsiteTxStatus 返回
message GetInsiteTxStatusResponse {
	int32 coin_id = 1;
	double amount_float64 = 2; // 不入库的参考金额
	uint64 amount_uint64 = 3; // 内部交互标准金额格式
	string address_from = 4; // 发送方
	string address_to = 5; // 接收方
	string insite_tx_type = 6; // recharge, payment, withdraw, unknown
	string transaction_id_insite = 7; // 站内交易ID
	string transaction_id_chain = 8; // 公链交易ID（如有）
	string status = 9; // 为done则成功；全部状态："pending_review", "pending_process", "pending_signinfo", "pending_signaction", "pending_broadcast", "pending_confirm", "done", "rejected", "error", "error_expected"
	bool is_processing = 10; // 对应数据库中mutex
	int64 createtime_utc = 11; // 创建时间
	int64 updatetime_utc = 12; // 上次更新时间
	bool is_success = 13; // 便于调用方判断
	bool is_failed = 14; // 不success不fail就是pending了
}

// ApplyTransaction 参数
message ApplyTransactionRequest {
	int32 coin_id = 1;
	string transaction_id_insite = 2; // 站内交易ID
	string address_from = 3; // 发送方
	string address_to = 4; // 接收方
	double amount_float64 = 5; // 不入库的参考金额
	uint64 amount_uint64 = 6; // 内部交互标准金额格式
	string type = 7; // recharge, payment, withdraw
	string uuid_signature = 8; // 2FA的时效性验证码，前期可以留空
	int64 createtime_utc = 9; // 用户提交请求时的时间戳，与2FA绑定
}

// // PortalSignInit 参数
// message PortalSignInit {
// 	int32 coin_id = 1;
// 	string uuid = 2; // 机器标识符
// }

// // PortalWalletInit 参数
// message PortalWalletInit {
// 	int32 coin_id = 1;
// 	string uuid = 2; // 机器标识符
// 	string location = 3; // 硬件所在地点（看板用到的节点信息，下同）
// 	string host_vendor = 4; // 硬件供应商
// 	string mac_address = 5; // MAC地址
// 	string public_ip = 6; // 公网ip，也可能没有
// 	string local_ip = 7; // 内网ip
// 	int64 timestamp_utc = 8; // 汇报时间
// }

message SuccessInfo {
	string info = 1; // "success"
}

service ServiceExample {
	// Method Version
	rpc Version (google.protobuf.Empty) returns (VersionResponse){
		option (google.api.http) = {
			post: "/version"
			body: "*"
		};
	}
}

// request body and response
message VersionResponse {
		string Info = 100;
}


// 以下为接入proxy部分



// 向proxy请求代理
message TransactionRequest {
	TransactionType TransactionType = 100;
	CoinType CoinType               = 110;
	UnsignedMessage Message         = 120;
}

enum TransactionType {
	TransactionTypeUnKnow = 0;
	TransactionTypeCreateAccount = 1;
	TransactionTypeTransaction = 2;
}

enum CoinType {
	CoinTypeUnKnow = 0;
	CoinTypeFIL = 1;
	CoinTypeBTC = 2;
}

message UnsignedMessage {
	uint64 Version    = 100;
	string To         = 110;
	string From       = 120;
	uint64 Nonce      = 130;
	string Value      = 140;

	int64 GasLimit    = 150;
	string GasFeeCap  = 160;
	string GasPremium = 170;
	uint64 Method     = 180;

	bytes Params      = 190;
}

message TransactionResponse {
	TransactionResponseInfo Info = 100;
}

message TransactionResponseInfo {
	string Address            = 100;// create new account address
	UnsignedMessage Message   = 110;
	Signature	   Signature    = 120;
}

message Signature {
	string SignType = 100;//secp256k1
	bytes Data      = 110;
}












