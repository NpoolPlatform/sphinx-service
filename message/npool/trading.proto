syntax = "proto3";

package sphinx.v1;

option go_package = "github.com/NpoolPlatform/message/npool/trading";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// 交易服务
service Trading {
	// 创建账户
	rpc RegisterAccount (RegisterAccountRequest) returns (AccountAddress) {
		option (google.api.http) = {
			post: "/v0/account/register"
			body: "*"
		};}
	// 余额查询
	rpc GetBalance (GetBalanceRequest) returns (AccountBalance) {
		option (google.api.http) = {
			get: "/v0/account/balance"
		};}
	// 转账 / 提现
	rpc ApplyTransaction (ApplyTransactionRequest) returns (SuccessInfo) {
		option (google.api.http) = {
			post: "/v0/account/transaction"
			body: "*"
		};}
	// TODO: 账户交易查询
	rpc GetTxJSON (GetTxJSONRequest) returns (AccountTxJSON) {} // reserved function
	// 交易状态查询
	rpc GetInsiteTxStatus (GetInsiteTxStatusRequest) returns (GetInsiteTxStatusResponse) {
		option (google.api.http) = {
			get: "/v0/account/transaction"
		};}
	// 接收ack
	rpc ACK (ACKRequest) returns (ACKResponse) {
		option (google.api.http) = {
			post: "/v0/internal/ack"
			body: "*"
		};}
}

// RegisterAccount 参数
message RegisterAccountRequest {
	string coin_name = 1; // 币种名称(唯一)
	string uuid = 3; // user_id或与其绑定的唯一标识符
}
// RegisterAccount 返回
message AccountAddress {
	string coin_name = 1; // 币种名称(唯一)
	string address = 3; // 创建的钱包地址
	string uuid = 4; // uuid将关联私钥，提高整体安全性
}

// GetBalance 参数
message GetBalanceRequest {
	string coin_name = 1; // 币种名称(唯一)
	string address = 3; // 查询的钱包地址
	int64 timestamp_utc = 4; // 长整型时间戳
}
// GetBalance 返回
message AccountBalance {
	string coin_name = 1; // 币种名称(唯一)
	string address = 3; // 查询的钱包地址
	int64 timestamp_utc = 4; // 长整型时间戳
	double amount_float64 = 5; // 余额
}

// GetTxJSONRequest 参数
message GetTxJSONRequest {
	// 继承钱包节点基础功能，预留
	string coin_name = 1; // 币种名称(唯一)
	string address = 3; // 要查询的钱包地址
	int64 timefrom_utc = 4; // 开始时间
	int64 timetill_utc = 5; // 结束时间
	int32 limit_n = 6; // 服务端限制返回条数
}
// GetTxJSONRequest 返回
message AccountTxJSON {
	string json = 1; // disabled for now
}

// GetInsiteTxStatus 参数
message GetInsiteTxStatusRequest {
	string transaction_id_insite = 1; // 站内交易ID
}

// GetInsiteTxStatus 返回
message GetInsiteTxStatusResponse {
	string transaction_id_insite = 8; // 站内交易ID
	string coin_name = 1; // 币种名称(唯一)
	double amount_float64 = 3; // 不入库的参考金额
	string address_from = 5; // 发送方
	string address_to = 6; // 接收方
	string insite_tx_type = 7; // recharge, payment, withdraw, unknown
	string transaction_id_chain = 9; // 公链交易ID（如有）
	string status = 10; // 为done则成功；全部状态："pending_review", "pending_process", "pending_signinfo", "pending_sign", "pending_broadcast", "pending_confirm", "done", "rejected", "error", "error_expected"
	bool is_processing = 11; // 对应数据库中mutex
	int64 createtime_utc = 12; // 创建时间
	int64 updatetime_utc = 13; // 上次更新时间
	bool is_success = 14; // 便于调用方判断
	bool is_failed = 15; // 不success不fail就是pending了
}

// ApplyTransaction 参数
message ApplyTransactionRequest {
	string coin_name = 1; // 币种名称(唯一)
	string transaction_id_insite = 3; // 站内交易ID
	string address_from = 4; // 发送方
	string address_to = 5; // 接收方
	double amount_float64 = 6; // 不入库的参考金额
	string type = 8; // recharge, payment, withdraw
	string uuid_signature = 9; // 2FA的时效性验证码，前期可以留空
	int64 createtime_utc = 10; // 用户提交请求时的时间戳，与2FA绑定
}

// // PortalSignInit 参数
// message PortalSignInit {
// 	int32 coin_id = 1;
// 	string uuid = 2; // 机器标识符
// }

// // PortalWalletInit 参数
// message PortalWalletInit {
// 	int32 coin_id = 1;
// 	string uuid = 2; // 机器标识符
// 	string location = 3; // 硬件所在地点（看板用到的节点信息，下同）
// 	string host_vendor = 4; // 硬件供应商
// 	string mac_address = 5; // MAC地址
// 	string public_ip = 6; // 公网ip，也可能没有
// 	string local_ip = 7; // 内网ip
// 	int64 timestamp_utc = 8; // 汇报时间
// }

message ACKRequest {
	string transaction_id_insite = 1; // 站内交易ID
	bool is_okay = 2; // 交易请求是否成功
}

message ACKResponse {
}

// deprecated
message SuccessInfo {
	string info = 1; // "success"
}

service ServiceExample {
	// Method Version
	rpc Version (google.protobuf.Empty) returns (VersionResponse){
		option (google.api.http) = {
			post: "/version"
			body: "*"
		};
	}
}

// request body and response
message VersionResponse {
		string Info = 100;
}










