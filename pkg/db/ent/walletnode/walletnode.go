// Code generated by entc, DO NOT EDIT.

package walletnode

const (
	// Label holds the string label denoting the walletnode type in the database.
	Label = "wallet_node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldHostVendor holds the string denoting the host_vendor field in the database.
	FieldHostVendor = "host_vendor"
	// FieldPublicIP holds the string denoting the public_ip field in the database.
	FieldPublicIP = "public_ip"
	// FieldLocalIP holds the string denoting the local_ip field in the database.
	FieldLocalIP = "local_ip"
	// FieldCreatetimeUtc holds the string denoting the createtime_utc field in the database.
	FieldCreatetimeUtc = "createtime_utc"
	// FieldLastOnlineTimeUtc holds the string denoting the last_online_time_utc field in the database.
	FieldLastOnlineTimeUtc = "last_online_time_utc"
	// EdgeCoin holds the string denoting the coin edge name in mutations.
	EdgeCoin = "coin"
	// Table holds the table name of the walletnode in the database.
	Table = "wallet_nodes"
	// CoinTable is the table that holds the coin relation/edge. The primary key declared below.
	CoinTable = "coin_info_wallet_nodes"
	// CoinInverseTable is the table name for the CoinInfo entity.
	// It exists in this package in order to avoid circular dependency with the "coininfo" package.
	CoinInverseTable = "coin_infos"
)

// Columns holds all SQL columns for walletnode fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldLocation,
	FieldHostVendor,
	FieldPublicIP,
	FieldLocalIP,
	FieldCreatetimeUtc,
	FieldLastOnlineTimeUtc,
}

var (
	// CoinPrimaryKey and CoinColumn2 are the table columns denoting the
	// primary key for the coin relation (M2M).
	CoinPrimaryKey = []string{"coin_info_id", "wallet_node_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
