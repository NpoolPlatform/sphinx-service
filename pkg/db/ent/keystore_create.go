// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/sphinx-service/pkg/db/ent/coininfo"
	"github.com/NpoolPlatform/sphinx-service/pkg/db/ent/keystore"
	"github.com/google/uuid"
)

// KeyStoreCreate is the builder for creating a KeyStore entity.
type KeyStoreCreate struct {
	config
	mutation *KeyStoreMutation
	hooks    []Hook
}

// SetAddress sets the "address" field.
func (ksc *KeyStoreCreate) SetAddress(s string) *KeyStoreCreate {
	ksc.mutation.SetAddress(s)
	return ksc
}

// SetPrivateKey sets the "private_key" field.
func (ksc *KeyStoreCreate) SetPrivateKey(s string) *KeyStoreCreate {
	ksc.mutation.SetPrivateKey(s)
	return ksc
}

// SetID sets the "id" field.
func (ksc *KeyStoreCreate) SetID(i int32) *KeyStoreCreate {
	ksc.mutation.SetID(i)
	return ksc
}

// SetCoinID sets the "coin" edge to the CoinInfo entity by ID.
func (ksc *KeyStoreCreate) SetCoinID(id uuid.UUID) *KeyStoreCreate {
	ksc.mutation.SetCoinID(id)
	return ksc
}

// SetCoin sets the "coin" edge to the CoinInfo entity.
func (ksc *KeyStoreCreate) SetCoin(c *CoinInfo) *KeyStoreCreate {
	return ksc.SetCoinID(c.ID)
}

// Mutation returns the KeyStoreMutation object of the builder.
func (ksc *KeyStoreCreate) Mutation() *KeyStoreMutation {
	return ksc.mutation
}

// Save creates the KeyStore in the database.
func (ksc *KeyStoreCreate) Save(ctx context.Context) (*KeyStore, error) {
	var (
		err  error
		node *KeyStore
	)
	if len(ksc.hooks) == 0 {
		if err = ksc.check(); err != nil {
			return nil, err
		}
		node, err = ksc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeyStoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ksc.check(); err != nil {
				return nil, err
			}
			ksc.mutation = mutation
			if node, err = ksc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ksc.hooks) - 1; i >= 0; i-- {
			if ksc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ksc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ksc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ksc *KeyStoreCreate) SaveX(ctx context.Context) *KeyStore {
	v, err := ksc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ksc *KeyStoreCreate) Exec(ctx context.Context) error {
	_, err := ksc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ksc *KeyStoreCreate) ExecX(ctx context.Context) {
	if err := ksc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ksc *KeyStoreCreate) check() error {
	if _, ok := ksc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "address"`)}
	}
	if v, ok := ksc.mutation.Address(); ok {
		if err := keystore.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "address": %w`, err)}
		}
	}
	if _, ok := ksc.mutation.PrivateKey(); !ok {
		return &ValidationError{Name: "private_key", err: errors.New(`ent: missing required field "private_key"`)}
	}
	if v, ok := ksc.mutation.PrivateKey(); ok {
		if err := keystore.PrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "private_key", err: fmt.Errorf(`ent: validator failed for field "private_key": %w`, err)}
		}
	}
	if _, ok := ksc.mutation.CoinID(); !ok {
		return &ValidationError{Name: "coin", err: errors.New("ent: missing required edge \"coin\"")}
	}
	return nil
}

func (ksc *KeyStoreCreate) sqlSave(ctx context.Context) (*KeyStore, error) {
	_node, _spec := ksc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ksc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (ksc *KeyStoreCreate) createSpec() (*KeyStore, *sqlgraph.CreateSpec) {
	var (
		_node = &KeyStore{config: ksc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: keystore.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: keystore.FieldID,
			},
		}
	)
	if id, ok := ksc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ksc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: keystore.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := ksc.mutation.PrivateKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: keystore.FieldPrivateKey,
		})
		_node.PrivateKey = value
	}
	if nodes := ksc.mutation.CoinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   keystore.CoinTable,
			Columns: []string{keystore.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: coininfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coin_info_keys = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KeyStoreCreateBulk is the builder for creating many KeyStore entities in bulk.
type KeyStoreCreateBulk struct {
	config
	builders []*KeyStoreCreate
}

// Save creates the KeyStore entities in the database.
func (kscb *KeyStoreCreateBulk) Save(ctx context.Context) ([]*KeyStore, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kscb.builders))
	nodes := make([]*KeyStore, len(kscb.builders))
	mutators := make([]Mutator, len(kscb.builders))
	for i := range kscb.builders {
		func(i int, root context.Context) {
			builder := kscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KeyStoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kscb *KeyStoreCreateBulk) SaveX(ctx context.Context) []*KeyStore {
	v, err := kscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kscb *KeyStoreCreateBulk) Exec(ctx context.Context) error {
	_, err := kscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kscb *KeyStoreCreateBulk) ExecX(ctx context.Context) {
	if err := kscb.Exec(ctx); err != nil {
		panic(err)
	}
}
