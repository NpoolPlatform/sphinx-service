// Code generated by entc, DO NOT EDIT.

package transaction

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// FieldTransactionID holds the string denoting the transaction_id field in the database.
	FieldTransactionID = "transaction_id"
	// FieldCid holds the string denoting the cid field in the database.
	FieldCid = "cid"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAmount,
	FieldFrom,
	FieldTo,
	FieldTransactionID,
	FieldCid,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount uint64
	// DefaultFrom holds the default value on creation for the "from" field.
	DefaultFrom string
	// FromValidator is a validator for the "from" field. It is called by the builders before save.
	FromValidator func(string) error
	// DefaultTo holds the default value on creation for the "to" field.
	DefaultTo string
	// ToValidator is a validator for the "to" field. It is called by the builders before save.
	ToValidator func(string) error
	// TransactionIDValidator is a validator for the "transaction_id" field. It is called by the builders before save.
	TransactionIDValidator func(string) error
	// DefaultCid holds the default value on creation for the "cid" field.
	DefaultCid string
	// CidValidator is a validator for the "cid" field. It is called by the builders before save.
	CidValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() uint32
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() uint32
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() uint32
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() uint32
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPendingReview      Status = "pending_review"
	StatusConfirm            Status = "confirm"
	StatusRejected           Status = "rejected"
	StatusPendingTransaction Status = "pending_transaction"
	StatusDone               Status = "done"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPendingReview, StatusConfirm, StatusRejected, StatusPendingTransaction, StatusDone:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for status field: %q", s)
	}
}
