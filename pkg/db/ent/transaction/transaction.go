// Code generated by entc, DO NOT EDIT.

package transaction

import (
	"fmt"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmountUint64 holds the string denoting the amount_uint64 field in the database.
	FieldAmountUint64 = "amount_uint64"
	// FieldAmountFloat64 holds the string denoting the amount_float64 field in the database.
	FieldAmountFloat64 = "amount_float64"
	// FieldAddressFrom holds the string denoting the address_from field in the database.
	FieldAddressFrom = "address_from"
	// FieldAddressTo holds the string denoting the address_to field in the database.
	FieldAddressTo = "address_to"
	// FieldNeedManualReview holds the string denoting the need_manual_review field in the database.
	FieldNeedManualReview = "need_manual_review"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTransactionIDInsite holds the string denoting the transaction_id_insite field in the database.
	FieldTransactionIDInsite = "transaction_id_insite"
	// FieldTransactionIDChain holds the string denoting the transaction_id_chain field in the database.
	FieldTransactionIDChain = "transaction_id_chain"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldMutex holds the string denoting the mutex field in the database.
	FieldMutex = "mutex"
	// FieldSignatureUser holds the string denoting the signature_user field in the database.
	FieldSignatureUser = "signature_user"
	// FieldSignaturePlatform holds the string denoting the signature_platform field in the database.
	FieldSignaturePlatform = "signature_platform"
	// FieldCreatetimeUtc holds the string denoting the createtime_utc field in the database.
	FieldCreatetimeUtc = "createtime_utc"
	// FieldUpdatetimeUtc holds the string denoting the updatetime_utc field in the database.
	FieldUpdatetimeUtc = "updatetime_utc"
	// EdgeCoin holds the string denoting the coin edge name in mutations.
	EdgeCoin = "coin"
	// EdgeReview holds the string denoting the review edge name in mutations.
	EdgeReview = "review"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// CoinTable is the table that holds the coin relation/edge.
	CoinTable = "transactions"
	// CoinInverseTable is the table name for the CoinInfo entity.
	// It exists in this package in order to avoid circular dependency with the "coininfo" package.
	CoinInverseTable = "coin_infos"
	// CoinColumn is the table column denoting the coin relation/edge.
	CoinColumn = "coin_info_transactions"
	// ReviewTable is the table that holds the review relation/edge.
	ReviewTable = "reviews"
	// ReviewInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewInverseTable = "reviews"
	// ReviewColumn is the table column denoting the review relation/edge.
	ReviewColumn = "transaction_review"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldAmountUint64,
	FieldAmountFloat64,
	FieldAddressFrom,
	FieldAddressTo,
	FieldNeedManualReview,
	FieldType,
	FieldTransactionIDInsite,
	FieldTransactionIDChain,
	FieldStatus,
	FieldMutex,
	FieldSignatureUser,
	FieldSignaturePlatform,
	FieldCreatetimeUtc,
	FieldUpdatetimeUtc,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transactions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"coin_info_transactions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AddressFromValidator is a validator for the "address_from" field. It is called by the builders before save.
	AddressFromValidator func(string) error
	// AddressToValidator is a validator for the "address_to" field. It is called by the builders before save.
	AddressToValidator func(string) error
	// DefaultNeedManualReview holds the default value on creation for the "need_manual_review" field.
	DefaultNeedManualReview bool
	// TransactionIDInsiteValidator is a validator for the "transaction_id_insite" field. It is called by the builders before save.
	TransactionIDInsiteValidator func(string) error
	// TransactionIDChainValidator is a validator for the "transaction_id_chain" field. It is called by the builders before save.
	TransactionIDChainValidator func(string) error
	// DefaultMutex holds the default value on creation for the "mutex" field.
	DefaultMutex bool
	// SignatureUserValidator is a validator for the "signature_user" field. It is called by the builders before save.
	SignatureUserValidator func(string) error
	// SignaturePlatformValidator is a validator for the "signature_platform" field. It is called by the builders before save.
	SignaturePlatformValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeRecharge Type = "recharge"
	TypePayment  Type = "payment"
	TypeWithdraw Type = "withdraw"
	TypeUnknown  Type = "unknown"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeRecharge, TypePayment, TypeWithdraw, TypeUnknown:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPendingReview    Status = "pending_review"
	StatusPendingProcess   Status = "pending_process"
	StatusPendingSigninfo  Status = "pending_signinfo"
	StatusPendingSign      Status = "pending_sign"
	StatusPendingBroadcast Status = "pending_broadcast"
	StatusPendingConfirm   Status = "pending_confirm"
	StatusDone             Status = "done"
	StatusRejected         Status = "rejected"
	StatusError            Status = "error"
	StatusErrorExpected    Status = "error_expected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPendingReview, StatusPendingProcess, StatusPendingSigninfo, StatusPendingSign, StatusPendingBroadcast, StatusPendingConfirm, StatusDone, StatusRejected, StatusError, StatusErrorExpected:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for status field: %q", s)
	}
}
